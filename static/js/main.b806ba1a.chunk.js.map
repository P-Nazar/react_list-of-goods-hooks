{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","sortField","setSortField","isReversed","setIsReversed","visibleGoods","goods","preperedGoods","sort","good1","good2","ALPHABETICALLY","localeCompare","LENGTH","length","reverse","getPreperedGoods","className","onClick","type","classNames","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,qCAAAA,E,yBAAAA,M,KAyCE,IAAME,EAAgB,WAC3B,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCF,oBAAS,GAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACMC,EAlCR,SACEC,EADF,GAMG,IAHCL,EAGF,EAHEA,UACAE,EAEF,EAFEA,WAGII,EAAa,YAAOD,GAiB1B,OAfIL,GACFM,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQT,GACN,KAAKJ,EAASc,eACZ,OAAOF,EAAMG,cAAcF,GAE7B,KAAKb,EAASgB,OACZ,OAAOJ,EAAMK,OAASJ,EAAMI,OAE9B,QACE,OAAO,MAKXX,EACKI,EAAcQ,UAGhBR,EAMcS,CACnBlB,EACA,CACEG,YACAE,eASJ,OACE,sBAAKc,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,QAAS,kBAAMhB,EAAaL,EAASc,iBACrCQ,KAAK,SACLF,UAAWG,IAAW,iBAAkB,CACtC,WAAYnB,IAAcJ,EAASc,iBAJvC,iCAUA,wBACEO,QAAS,kBAAMhB,EAAaL,EAASgB,SACrCM,KAAK,SACLF,UAAWG,IAAW,oBAAqB,CACzC,WAAYnB,IAAcJ,EAASgB,SAJvC,4BAUA,wBACEK,QAAS,kBAAMd,GAAeD,IAC9BgB,KAAK,SACLF,UAAWG,IAAW,oBAAqB,CACzC,YAAajB,IAJjB,sBASEF,GAAaE,IACb,wBACEe,QAvCW,WACnBhB,EAAa,IACbE,GAAc,IAsCNe,KAAK,SACLF,UAAU,4BAHZ,sBAUJ,6BACGZ,EAAagB,KAAI,SAAAC,GAAI,OACpB,oBACE,UAAQ,OADV,SAIGA,GAFIA,YCvHjBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.b806ba1a.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport classNames from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  ALPHABETICALLY = 'Sort alphabetically',\n  LENGTH = 'Sort by length',\n}\n\ninterface SortedParams {\n  sortField: string | number;\n  isReversed: boolean;\n}\n\nfunction getPreperedGoods(\n  goods: string[],\n  {\n    sortField,\n    isReversed,\n  }: SortedParams,\n) {\n  const preperedGoods = [...goods];\n\n  if (sortField) {\n    preperedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SortType.ALPHABETICALLY:\n          return good1.localeCompare(good2);\n\n        case SortType.LENGTH:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReversed) {\n    return preperedGoods.reverse();\n  }\n\n  return preperedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortField, setSortField] = useState('');\n  const [isReversed, setIsReversed] = useState(false);\n  const visibleGoods = getPreperedGoods(\n    goodsFromServer,\n    {\n      sortField,\n      isReversed,\n    },\n  );\n\n  const handlerReset = () => {\n    setSortField('');\n    setIsReversed(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          onClick={() => setSortField(SortType.ALPHABETICALLY)}\n          type=\"button\"\n          className={classNames('button is-info', {\n            'is-light': sortField !== SortType.ALPHABETICALLY,\n          })}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          onClick={() => setSortField(SortType.LENGTH)}\n          type=\"button\"\n          className={classNames('button is-success', {\n            'is-light': sortField !== SortType.LENGTH,\n          })}\n        >\n          Sort by length\n        </button>\n\n        <button\n          onClick={() => setIsReversed(!isReversed)}\n          type=\"button\"\n          className={classNames('button is-warning', {\n            'is-light': !isReversed,\n          })}\n        >\n          Reverse\n        </button>\n        {(sortField || isReversed) && (\n          <button\n            onClick={handlerReset}\n            type=\"button\"\n            className=\"button is-danger is-light\"\n          >\n            Reset\n          </button>\n        ) }\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li\n            data-cy=\"Good\"\n            key={good}\n          >\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}